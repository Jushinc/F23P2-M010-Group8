# exploreOnly by Jushin
import random

def exploreOnly() -> float:
    days_per_cafeteria = 50
    total_days = 200
    # Mean happiness values for each cafeteria
    mean_values = [10, 8, 9, 7]
    # Standard deviation of happiness for each cafeteria
    std_values = [2, 1, 1.5, 1]
    total_happiness = 0

    # Iterate through each cafeteria
    for i in range(4):
        # Iterate for the specified number of days
        for j in range(days_per_cafeteria):
            mean = mean_values[i]
            std = std_values[i]
            # Generate normally distributed random number
            happiness = random.normalvariate(mean, std)
            # Add generated happiness to the total
            total_happiness += happiness
    # return the sum of all the happiness values that were generated over 200 days
    return total_happiness




# simulation by Roman Espindola
def simulation(t: int, e=10):
        # initialize 3 variables to zero
        explore_Only = 0
        exploit_Only = 0
        eGreedy = 0
        cafe1 = 10
        cafe2 = 8
        cafe3 = 9
        cafe4 = 7

        for i in range(t):
            # for t times, calculate the average happiness
            explore_Only += exploreOnly()
            exploit_Only += exploitOnly()
            eGreedy += eGreedy(e)

        optimal_happiness = 200 * cafe1

        expected_explore_happiness = 50 * (cafe1 + cafe2 + cafe3 + cafe4)
        expected_explore_regret = optimal_happiness - expected_explore_happiness
        simulated_explore_happiness = explore_Only / t
        simulated_explore_regret = optimal_happiness - simulated_explore_happiness

        expected_exploit_happiness = (cafe2 + cafe3 + cafe4) + (197 * cafe1)
        expected_exploit_regret = optimal_happiness - expected_exploit_happiness
        simulated_exploit_happiness = exploit_Only / t
        simulated_exploit_regret = optimal_happiness - simulated_exploit_happiness

        expected_eGreedy_happiness = (200*(((100 - e)/100) * cafe1) + (200 * ((e/400)*(cafe1 + cafe2 + cafe3 + cafe4))))
        expected_eGreedy_regret = optimal_happiness - expected_eGreedy_happiness
        simulated_eGreedy_happiness = eGreedy / t
        simulated_eGreedy_regret = optimal_happiness - simulated_eGreedy_happiness
        # calculations to obtain expected and simulated values for all 3 of the functions


        #print (optimum happiness)
        print("Optimum Happiness: " + str(optimal_happiness))
        print("\n")


        print("Explore Only: ")
        print("Expected Happiness: " + str(expected_explore_happiness))
        print("\n")
        print("Expected regret: " + str(expected_explore_regret))
        print("\n")
        print("Simulated happiness: " + str(simulated_explore_happiness))
        print("\n")
        print("Simulated regret: " + str(simulated_explore_regret))
        print("\n")
        # prints out all the values for Explore Only with the use of "\n" putting every new value on a new line

        print("Exploit Only: ")
        print("Expected Happiness: " + str(expected_exploit_happiness))
        print("\n")
        print("Expected regret: " + str(expected_exploit_regret))
        print("\n")
        print("Simulated happiness: " + str(simulated_exploit_happiness))
        print("\n")
        print("Simulated regret: " + str(simulated_exploit_regret))
        print("\n")
        # prints out all the values for Exploit Only with the use of "\n" putting every new value on a new line

        print("eGreedy: ")
        print("Expected Happiness: " + str(expected_eGreedy_happiness))
        print("\n")
        print("Expected regret: " + str(expected_eGreedy_regret))
        print("\n")
        print("Simulated happiness: " + str(simulated_eGreedy_happiness))
        print("\n")
        print("Simulated regret: " + str(simulated_eGreedy_regret))
        print("\n")
